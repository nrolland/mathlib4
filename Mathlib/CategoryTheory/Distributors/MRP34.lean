import Mathlib.CategoryTheory.Products.Basic
import Mathlib.CategoryTheory.Limits.Cones
import Mathlib.CategoryTheory.Category.Cat

set_option linter.longLine false

open CategoryTheory
open Functor

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ vm u‚ÇÅ u‚ÇÇ u‚ÇÉ u um
variable {J : Type u‚ÇÅ} [Category.{v‚ÇÅ} J]
variable {M : Type vm } [Category.{um} M]

structure Simple (F : J ‚•§ M) where
  pt : M

structure SimpleMorphism  {F : J ‚•§ M} (x y : Simple F) where
  hom : x.pt ‚ü∂ y.pt

instance  simple (F : J ‚•§ M) : Category (Simple F) where
  Hom x y:=  SimpleMorphism x y
  id x := { hom := ùüô x.pt }
  comp f g := { hom := f.hom ‚â´ g.hom }

variable {F G H: J ‚•§ M}
variable {X Y: Simple F}

def simpleCompose  (Œ± : F ‚ü∂ G) : Simple F ‚•§ Simple G  where
  obj c :=  { pt := c.pt  }
  map {X Y} (m : X ‚ü∂ Y) := { hom := m.hom }

-- Definitional equality of type
example (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
    ((simpleCompose (Œ± ‚â´ Œ≤)).obj X ‚ü∂ (simpleCompose (Œ± ‚â´ Œ≤)).obj Y)
    = ((simpleCompose Œ± ‚ãô simpleCompose Œ≤).obj X ‚ü∂ (simpleCompose Œ± ‚ãô simpleCompose Œ≤).obj Y)
  := rfl

-- Definitional equality of type
example (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
    ((simpleCompose (Œ± ‚â´ Œ≤)).obj X ‚ü∂ (simpleCompose (Œ± ‚â´ Œ≤)).obj Y)
    = ((simpleCompose Œ± ‚ãô simpleCompose Œ≤).obj X ‚ü∂ (simpleCompose Œ± ‚ãô simpleCompose Œ≤).obj Y)
  := rfl

example (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) : (((simpleCompose (Œ± ‚â´ Œ≤)).obj X)) =  ((simpleCompose Œ± ‚ãô simpleCompose Œ≤).obj X) := rfl



------

structure MyCone  (F : J ‚•§ M) where
  pt : M
  œÄ : (const J).obj pt ‚ü∂ F

structure MyConeMorphism   (x y : MyCone F) where
  hom : x.pt ‚ü∂ y.pt

instance : Category (MyCone F) where
  Hom x y:=  MyConeMorphism x y
  id x := { hom := ùüô x.pt }
  comp f g := { hom := f.hom ‚â´ g.hom }

def myPostCompose   (Œ± : F ‚ü∂ G) : MyCone F ‚•§ MyCone G  where
  obj c :=  {pt := c.pt, œÄ := c.œÄ  ‚â´ Œ± }
  map {X Y} m := { hom := m.hom }

variable {X Y: MyCone F}

example (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) : (((myPostCompose (Œ± ‚â´ Œ≤)).obj X)) =  ((myPostCompose Œ± ‚ãô myPostCompose Œ≤).obj X) := rfl

example (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
    ((myPostCompose (Œ± ‚â´ Œ≤)).obj X ‚ü∂ (myPostCompose (Œ± ‚â´ Œ≤)).obj Y) =
    ((myPostCompose Œ± ‚ãô myPostCompose Œ≤).obj X ‚ü∂ (myPostCompose Œ± ‚ãô myPostCompose Œ≤).obj Y)
  := rfl
