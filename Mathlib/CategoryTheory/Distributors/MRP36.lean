import Mathlib.CategoryTheory.EqToHom
import Mathlib.CategoryTheory.Functor.Const

open CategoryTheory

universe v‚ÇÅ vm u‚ÇÅ u um
variable {J : Type u‚ÇÅ} [Category.{v‚ÇÅ} J]
variable {M : Type um } [Category.{vm} M]
variable {F G H: J ‚•§ M} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H)

@[ext]
structure MyCone  (F : J ‚•§ M) where
  pt : M
  œÄ : (Functor.const J).obj pt ‚ü∂ F

structure MyConeMorphism   (x y : MyCone F) where
  hom : x.pt ‚ü∂ y.pt

instance : Category (MyCone F) where
  Hom x y:=  MyConeMorphism x y
  id x := { hom := ùüô x.pt }
  comp f g := { hom := f.hom ‚â´ g.hom }

def pc (Œ± : F ‚ü∂ G) : MyCone F ‚•§ MyCone G  where
  obj c :=  {pt := c.pt, œÄ := c.œÄ  ‚â´ Œ± }
  map {X Y} m := { hom := m.hom }

def eqobj  (x : MyCone F):
    (((pc (Œ± ‚â´ Œ≤)).obj x)) =  ((pc Œ± ‚ãô pc Œ≤).obj x) :=
  MyCone.ext rfl (by simp;exact (Category.assoc _ _ _).symm)

---------------------------------------------------------------------
-- We want (pc (Œ± ‚â´ Œ≤)).map m  = (pc Œ± ‚ãô pc Œ≤).map m
-- but that's not type correct, so we need instead

def howToGetThat? (x y : MyCone F) (m : x ‚ü∂ y) :
   eqToHom (eqobj _ _ x ) ‚â´ ((pc Œ± ‚ãô pc Œ≤).map m) = ((pc (Œ± ‚â´ Œ≤)).map m ‚â´ eqToHom (eqobj _ _ y))
   := sorry

def howToGetThat (x y : MyCone F) (m : x ‚ü∂ y) :
    (pc (Œ± ‚â´ Œ≤)).map m = cast (by simp[eqobj]) ((pc Œ± ‚ãô pc Œ≤).map m)
  := by
    simp
    rw [Category.assoc]
    sorry

---------------------------------------------------------------------
-- PS : with bounded definitional equality, it would be easy as it has the same definition
def eq1 (x y: MyCone F) (m : x ‚ü∂ y) :
  (pc (Œ± ‚â´ Œ≤)).map m = { hom := m.hom }  := rfl

def eq2 (x y: MyCone F) (m : x ‚ü∂ y) :
   (pc Œ± ‚ãô pc Œ≤).map m = { hom := m.hom }  := rfl
