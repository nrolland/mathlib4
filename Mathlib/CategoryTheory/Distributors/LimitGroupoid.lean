import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Equivalence
import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.Limits.IsLimit
import Mathlib.CategoryTheory.Iso
import Mathlib.CategoryTheory.Distributors.CatIso
import Mathlib.CategoryTheory.Distributors.EqToHomD
import Mathlib.CategoryTheory.Distributors.TerminalD

open CategoryTheory
open Limits
open IsLimit

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ vm u‚ÇÅ u‚ÇÇ u‚ÇÉ u um
variable {J : Type u‚ÇÅ} [Category.{v‚ÇÅ} J]
variable {B : Type u‚ÇÇ } [Category.{v‚ÇÇ} B]
variable {C : Type u‚ÇÇ } [Category.{v‚ÇÇ} C]

variable (F G : J ‚•§ B)


abbrev Limit  :=  Œ£ x : Cone F, IsLimit x
instance limitGroupoid : Groupoid (Limit F) where
  Hom x y  :=  ConeMorphism x.1 y.1
  id x := ùüô x.1
  comp f g := Cone.category.comp f g
  inv {x y} _  := IsLimit.liftConeMorphism x.2 y.1
  inv_comp {_ y} _ := IsLimit.uniq_cone_morphism y.2
  comp_inv {x _} _ := IsLimit.uniq_cone_morphism x.2

def limitConnected (x y : Limit F) : x ‚ü∂ y := IsLimit.liftConeMorphism y.2 x.1

def limitFctr : (J ‚•§ B ) ‚•§ Cat where
  obj f := Cat.of (Limit f )
  map {f g } Œ± := sorry
  map_id f := sorry
  map_comp := sorry

def isoFunctorIsoLimit {F G : J ‚•§ B} (i: F ‚âÖ G)  : Cat.of (Limit F) ‚âÖ Cat.of (Limit G) :=
  Functor.mapIso limitFctr i
