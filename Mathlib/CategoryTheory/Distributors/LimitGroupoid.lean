import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Equivalence
import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.Limits.IsLimit
import Mathlib.CategoryTheory.Iso

open CategoryTheory
open Limits

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ vm u‚ÇÅ u‚ÇÇ u‚ÇÉ u um
variable {J : Type u‚ÇÅ} [Category.{v‚ÇÅ} J]
variable {B : Type u‚ÇÇ } [Category.{v‚ÇÇ} B]
variable {C : Type u‚ÇÇ } [Category.{v‚ÇÇ} C]

variable (F G : J ‚•§ B)


abbrev Limit  :=  Œ£ x : Cone F, IsLimit x

instance limitGroupoid : Groupoid (Limit F) where
  Hom x y  :=  ConeMorphism x.1 y.1
  id x := ùüô x.1
  comp f g := Cone.category.comp f g
  inv {x y} _  := IsLimit.liftConeMorphism x.2 y.1
  inv_comp {_ y} _ := IsLimit.uniq_cone_morphism y.2
  comp_inv {x _} _ := IsLimit.uniq_cone_morphism x.2

def limitConnected (x y : Limit F) : x ‚ü∂ y := IsLimit.liftConeMorphism y.2 x.1

def limitFctr : (J ‚•§ B ) ‚•§ Cat where
  obj f := Cat.of (Limit f )
  map {f g } Œ± := sorry
  map_id f := sorry
  map_comp := sorry

def isoDiagIsoLimit {F G : J ‚•§ B} (i: F ‚âÖ G)  : Cat.of (Limit F) ‚âÖ Cat.of (Limit G) :=
  Functor.mapIso limitFctr i


abbrev Terminal (B : Type u‚ÇÇ ) [Category.{v‚ÇÇ} B] :=  Œ£ x : B, IsTerminal x

instance terminalGroupoid : Groupoid (Terminal B) where
  Hom x y  :=  x.1 ‚ü∂ y.1
  id x := ùüô x.1
  comp {x y z} f g :=  f ‚â´ g
  inv {x y} _  :=  IsTerminal.from x.2 y.1
  inv_comp {_ y} _ := IsTerminal.hom_ext y.2 _ _
  comp_inv {x _} _ := IsTerminal.hom_ext x.2 _ _


def terminalConnected (x y : Terminal B) : x ‚ü∂ y := Limits.IsTerminal.from y.2 x.1

def isoCatIsoTerminal  (i: B ‚âÖ C)  : Terminal B ‚âÖ Terminal C where
  hom := sorry
  inv := sorry
  hom_inv_id := sorry
  inv_hom_id := sorry



-- def uniqueUpToIso {s t : Cone F} (P : IsLimit s) (Q : IsLimit t) : s ‚âÖ t
-- theorem hom_isIso {s t : Cone F} (P : IsLimit s) (Q : IsLimit t) (f : s ‚ü∂ t) : IsIso f
-- def equivIsoLimit {r t : Cone F} (i : r ‚âÖ t) : IsLimit r ‚âÉ IsLimit t
-- def ofIsoLimit {r t : Cone F} (P : IsLimit r) (i : r ‚âÖ t) : IsLimit t
--uliftFunctor
