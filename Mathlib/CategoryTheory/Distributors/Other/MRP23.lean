import Mathlib.CategoryTheory.Category.Cat.Adjunction
import Mathlib.CategoryTheory.Elements

open CategoryTheory

universe v‚ÇÇ u‚ÇÇ u vm um
variable {B : Type u‚ÇÇ } [Category.{v‚ÇÇ} B]
variable {M : Type vm } [Category.{um} M]
variable (F : (B·µí·µñ√óB) ‚•§ M)

structure CoWedge : Type (max (max um u‚ÇÇ) vm) where
  pt : M
  leg (b:B) : F.obj (Opposite.op b,b) ‚ü∂ pt
  cowedgeCondition : ‚àÄ ‚¶Éc c' : B‚¶Ñ (f : c ‚ü∂ c'),
     (F.map (f.op, ùüô c) ‚â´ leg c : F.obj (Opposite.op c', c) ‚ü∂  pt)  =
     (F.map ((ùüô c').op, f) ‚â´ leg c'  : F.obj (Opposite.op c', c)  ‚ü∂  pt) := by aesop_cat

structure CoWedgeMorphism (x y : CoWedge F) where
  Hom : x.pt ‚ü∂ y.pt
  cowedgeCondition : ‚àÄ (c : B), x.leg c ‚â´ Hom = y.leg c := by aesop_cat

attribute [simp] CoWedgeMorphism.cowedgeCondition

instance : Category (CoWedge F) where
  Hom := fun x y => CoWedgeMorphism _ x y
  id := fun x => {Hom := ùüô x.pt}
  comp := fun {X Y Z} f g => {
    Hom := f.Hom ‚â´ g.Hom
    cowedgeCondition := fun c => by rw [<- Category.assoc]; aesop_cat }

def NatTrans.mapElements {F G : B ‚•§ Type _} (œÜ : F ‚ü∂ G) : F.Elements ‚•§ G.Elements where
  obj := fun ‚ü®X, x‚ü© ‚Ü¶ ‚ü®_, œÜ.app X x‚ü©
  map {p q} := fun ‚ü®f,h‚ü© ‚Ü¶ ‚ü®f, by have hb := congrFun (œÜ.naturality f) p.2; aesop_cat‚ü©

def Functor.ElementsFunctor : (B ‚•§ Type u) ‚•§ Cat.{v‚ÇÇ, max u‚ÇÇ u} where
  obj F := Cat.of.{v‚ÇÇ, max u‚ÇÇ u} (F.Elements :  Type (max u‚ÇÇ u) )
  map {F G} n := {
    obj := fun ‚ü®X,x‚ü© ‚Ü¶  ‚ü®X, n.app X x ‚ü©
    map := fun ‚ü®X, x‚ü© {Y} ‚ü®f,_‚ü© ‚Ü¶
    match Y with | ‚ü®Y, y‚ü© => ‚ü®f, by have := congrFun (n.naturality f) x;aesop_cat‚ü©
  }

def myColimitPt : (B ‚•§ Type u) ‚•§ Type (max u‚ÇÇ u)
  := @Functor.ElementsFunctor B _ ‚ãô Cat.connectedComponents

----

def myCoendPt : (B·µí·µñ √ó B ‚•§  Type u) ‚•§  Type (max u u‚ÇÇ) where
  obj F := ConnectedComponents F.Elements
  map {f g} n :=
    let as :  Cat.of f.Elements ‚ü∂ Cat.of  g.Elements := NatTrans.mapElements n
    Cat.connectedComponents.map (as)
  map_id f := funext fun xq ‚Ü¶ by obtain ‚ü®x,rfl‚ü© := Quotient.exists_rep xq; rfl
  map_comp {f g h } n m := funext fun xq ‚Ü¶ by obtain ‚ü®x,rfl‚ü© := Quotient.exists_rep xq; rfl

def myOtherCoendPt : (B·µí·µñ √ó B ‚•§ Type u) ‚•§  Type (max u u‚ÇÇ v‚ÇÇ) :=
  (CategoryTheory.whiskeringLeft _ _ _ ).obj (CategoryOfElements.œÄ (Functor.hom B)) ‚ãô myColimitPt

def MyType := ‚àÉ u, Type u

-- def they_might_be_equal  {B : Type u‚ÇÇ} [Category.{u‚ÇÇ, u‚ÇÇ} B] :
--   @myCoendPt.{u‚ÇÇ, u‚ÇÇ, u} B _ = @myOtherCoendPt.{u‚ÇÇ, u‚ÇÇ, u} B _ :=  sorry

-- def they_can't_be_equal  {B : Type u‚ÇÇ} [Category.{v‚ÇÇ, u‚ÇÇ} B] :
--   @myCoendPt.{v‚ÇÇ, u‚ÇÇ, u} B _ = @myOtherCoendPt.{v‚ÇÇ, u‚ÇÇ, u} B _  := sorry
-- -- type mismatch
-- --   myOtherCoendPt
-- -- has type
-- --   (B·µí·µñ √ó B ‚•§ Type u) ‚•§ Type (max u u‚ÇÇ v‚ÇÇ) : Type (max (max u u‚ÇÇ) (max (max u u‚ÇÇ) v‚ÇÇ) (max (max (max (u + 1) u‚ÇÇ) u) v‚ÇÇ) (max (u + 1) (u‚ÇÇ + 1)) (v‚ÇÇ + 1))
-- -- but is expected to have type
-- --   (B·µí·µñ √ó B ‚•§ Type u) ‚•§ Type (max u u‚ÇÇ) : Type (max (max u u‚ÇÇ) (max (max (max (u + 1) u‚ÇÇ) u) v‚ÇÇ) (u + 1) (u‚ÇÇ + 1))L
