import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Equivalence
import Mathlib.CategoryTheory.Functor.Category

open CategoryTheory
open Functor
open Opposite

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ vm u‚ÇÅ u‚ÇÇ u‚ÇÉ u um
variable {B : Type u‚ÇÇ } [Category.{v‚ÇÇ} B]
variable {M : Type vm } [Category.{um} M]
variable (F : (B·µí·µñ√óB) ‚•§ M)
set_option linter.longLine false

@[ext]
structure Simple (F : B ‚•§ M)  where
  pt : M
  -- leg c : pt ‚ü∂ F.obj c

@[ext]
structure SimpleMorphism  {F : B ‚•§ M} (x y : Simple F) where
  hom : x.pt ‚ü∂ y.pt

variable {F G : (B·µí·µñ√óB) ‚•§ M}

def fctrObj (i: F ‚ü∂ G) (w: Simple F) : Simple G  where
  pt := w.pt
  -- leg c := w.leg c ‚â´ i.app c

def fctrHomMap  (i: F ‚ü∂ G) {x y}  (m : SimpleMorphism x y) : SimpleMorphism (fctrObj i x) (fctrObj i y) :=
  { hom := m.hom }


def law   {x y } (m : SimpleMorphism x y ) : HEq (fctrHomMap (ùüô F) m) m  :=
    let hcast : SimpleMorphism x y = SimpleMorphism ((fctrObj (ùüô F)) x) ((fctrObj (ùüô F)) y) := sorry
    let cm := cast hcast m
    have asdq : cm.hom = m.hom := by aesop?
    sorry
