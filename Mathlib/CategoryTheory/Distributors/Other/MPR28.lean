import Mathlib.CategoryTheory.Functor.Currying
import Mathlib.CategoryTheory.Functor.Hom

namespace CategoryTheory.Distributors
abbrev Dist.{u, vโ, uโ, vโ, uโ} (A : Type uโ) [Category.{vโ} A] (B : Type uโ ) [Category.{vโ} B] := Bแตแต ร A โฅค Type u
universe u
variable {A : Type u } [Category.{u} A]
variable {B : Type u } [Category.{u} B]
variable {C : Type u } [Category.{u} C]
variable {D : Type u } [Category.{u} D]

def opFunctor  :  (A โฅค B)แตแต โฅค (Aแตแต โฅค Bแตแต)  where -- utility
  obj f := Functor.op (Opposite.unop f)
  map {fop gop : (A โฅค B)แตแต} (nop : fop โถ gop) := {
    app := fun ao =>  Opposite.op ((Opposite.unop nop).app (Opposite.unop ao))
    naturality := fun _ _ uo => congrArg Quiver.Hom.op ((nop.unop.naturality uo.unop).symm) }

def prodFunctor : (A โฅค B) ร (C โฅค D) โฅค A ร C โฅค B ร D where -- utility
  obj FG := FG.1.prod FG.2
  map nm :=  NatTrans.prod nm.1 nm.2


-- What I HAVE to write

def phi_ : (A โฅค B) โฅค Dist A B  :=
  (curry.obj prodFunctor).obj (๐ญ Bแตแต) โ (whiskeringRight _ _ _ ).obj (Functor.hom B)

def _phi : (A โฅค B)แตแต โฅค  Dist B A :=
  opFunctor โ (curry.obj (Prod.swap _ _ โ prodFunctor )).obj (๐ญ B) โ
    (whiskeringRight _ _ _ ).obj (Functor.hom B)


-- What I want to write

def phi_' : (A โฅค B) โฅค Dist A B    :=
  prodFunctor ((๐ญ Bแตแต), (ยท)) โ Functor.hom B

def _phi' : (A โฅค B)แตแต โฅค  Dist B A :=
  opFunctor โ prodFunctor ((ยท)แตแต, (๐ญ B))  โ Functor.hom B


end CategoryTheory.Distributors
