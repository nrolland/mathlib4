import Mathlib.CategoryTheory.Elements
open CategoryTheory
open CategoryOfElements
open Functor
open Opposite

-- 1 - I write some definition
------------------------------------------------------------------------------------------------
section wedge
universe v‚ÇÇ vm u‚ÇÇ  um
variable {B : Type u‚ÇÇ } [Category.{v‚ÇÇ} B]
variable {M : Type um } [Category.{vm} M]

structure Wedge (F : (B·µí·µñ√óB) ‚•§ M) :  Type (max u‚ÇÇ um vm) where
  pt : M
  leg (c:B) : pt ‚ü∂ F.obj (op c,c)
  wedgeCondition : ‚àÄ ‚¶Éc c' : B‚¶Ñ (f : c ‚ü∂ c'),
    (leg c ‚â´ F.map ((ùüô c).op,f) : pt ‚ü∂ F.obj (op c, c'))
     = (leg c' ‚â´ F.map (f.op, ùüô c')  : pt ‚ü∂ F.obj (op c, c')) := by aesop_cat

end wedge

-- 2 - I try to use the definition
------------------------------------------------------------------------------------------------
section trying_to_use
universe v‚ÇÇ v‚ÇÉ  u‚ÇÇ u‚ÇÉ
variable {B : Type u‚ÇÇ } [Category.{v‚ÇÇ} B]
variable {C : Type u‚ÇÉ } [Category.{v‚ÇÉ} C]


def natAsEnd (F G : B ‚•§ C): Wedge ( F.op.prod G ‚ãô hom C)  := {
  pt := NatTrans F G -- I find that the constraint solvers can't unify  : v3 = max v3 u2
  leg := sorry
  wedgeCondition := sorry
}
end trying_to_use


-- 3- So I set u2 = v3, it works
------------------------------------------------------------------------------------------------
universe v‚ÇÇ v‚ÇÉ  u‚ÇÇ u‚ÇÉ
variable {B : Type v‚ÇÉ } [Category.{v‚ÇÇ} B]
variable {C : Type u‚ÇÉ } [Category.{v‚ÇÉ} C]

def natTrans  (F G : B ‚•§ C) := (NatTrans F G : Type _ )
def CFG  (F G : B ‚•§ C) :  B·µí·µñ √ó B ‚•§ Type v‚ÇÉ := F.op.prod G ‚ãô hom C

def natAsEndsad (F G : B ‚•§ C) : Type _  :=  Wedge (F.op.prod G ‚ãô hom C)

def natAsEnd2 (F G : B ‚•§ C): Wedge ( F.op.prod G ‚ãô hom C)  := {
  pt := natTrans F G
  leg := sorry
  wedgeCondition := sorry
}
