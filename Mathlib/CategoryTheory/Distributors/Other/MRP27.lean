/-
Copyright (c) 2024 Nicolas Rolland. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicolas Rolland
-/
import Mathlib.CategoryTheory.Category.Cat.Adjunction
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Functor.Currying
import Mathlib.CategoryTheory.Monoidal.Types.Basic
import Mathlib.CategoryTheory.Products.Associator
import Mathlib.CategoryTheory.Distributors.End
/-!
# Distributors

Distributors generalize functors like relations generalizes functions

## Notes

## TODO

## references

- Distributor at work
- Les distributeurs
-/
namespace CategoryTheory.Distributors

set_option linter.longLine false

open CategoryTheory
open MonoidalCategory
open Limits

@[pp_with_univ]
abbrev Dist.{u, v‚ÇÇ, u‚ÇÇ, v‚ÇÅ, u‚ÇÅ} (A : Type u‚ÇÅ) [Category.{v‚ÇÅ} A] (B : Type u‚ÇÇ ) [Category.{v‚ÇÇ} B] := B·µí·µñ √ó A ‚•§ Type u

--- distributors
universe u
variable {A : Type u } [Category.{u} A]
variable {B : Type u } [Category.{u} B]
variable {C : Type u } [Category.{u} C]
variable {D : Type u } [Category.{u} D]

def plugOne : (B √ó D)·µí·µñ  √ó (A √ó C) ‚•§ (B·µí·µñ √ó A) √ó D·µí·µñ √ó C  := Functor.prod ((prodOpEquiv B).functor) (ùü≠ _) ‚ãô prod.associator _ _ _ ‚ãô Functor.prod (ùü≠ _)  (prod.inverseAssociator  _ _ _ ) ‚ãô    Functor.prod (ùü≠ _) (Functor.prod (Prod.swap _ _) (ùü≠ _) ) ‚ãô     Functor.prod (ùü≠ _) (prod.associator _ _ _) ‚ãô    (prod.inverseAssociator  _ _ _ )
def plugTwo   : (C·µí·µñ √ó A) √ó (B·µí·µñ √ó B) ‚•§  (B √ó C)·µí·µñ √ó (A √ó B)  := (prod.inverseAssociator  _ _ _ ) ‚ãô Functor.prod (Prod.swap _ _) (ùü≠ _) ‚ãô Functor.prod (prod.inverseAssociator _ _ _) (ùü≠ _) ‚ãô (prod.associator  _ _ _ ) ‚ãô Functor.prod ((prodOpEquiv B).inverse) (ùü≠ _)

def timesObj (P : Dist.{u} A B) (Q: Dist.{u} C D) :
    Dist.{u} (A √ó C) (B √ó D) :=
  plugOne ‚ãô Functor.prod P Q ‚ãô tensor (Type u)

def timesFunctor : (Dist.{u} A B) √ó ( Dist.{u} C D) ‚•§
  Dist.{u} (A √ó C) (B √ó D)  where
  obj := fun (P,Q) ‚Ü¶ timesObj P Q
  map := fun (a,b) ‚Ü¶ whiskerLeft plugOne (whiskerRight (NatTrans.prod a b) (tensor (Type u)))

def opObj (P : Dist A B) : Dist B·µí·µñ A·µí·µñ := (Functor.prod (unopUnop _) (ùü≠ _) ‚ãô Prod.swap _ _) ‚ãô P

def op : (Dist A B) ‚•§ Dist B·µí·µñ A·µí·µñ where
  obj := opObj
  map := whiskerLeft (Functor.prod (unopUnop _) (ùü≠ _) ‚ãô Prod.swap _ _)

--- Composition

def compObj (P : Dist A B) (Q: Dist B C) : Dist A C  :=
  ((whiskeringRight _ _ _ ).obj myCoendPt).obj (curryObj (plugTwo ‚ãô timesObj P Q))

def comp : (Dist.{u} A B) √ó (Dist.{u} B C) ‚•§  Dist.{u} A C  :=
  timesFunctor ‚ãô (whiskeringLeft _ _  _ ).obj plugTwo ‚ãô curry ‚ãô (whiskeringRight _ _ _ ).obj myCoendPt


--- Laws

def id  (B : Type u) [Category.{u} B] : Dist B B  := Functor.hom B

lemma comp_id (F : Dist A B) : comp.obj  (F, id B) = F := by
  Functor.hext
  sorry


end CategoryTheory.Distributors
