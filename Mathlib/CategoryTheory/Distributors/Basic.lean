/-
Copyright (c) 2024 Nicolas Rolland. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicolas Rolland
-/
import Mathlib.CategoryTheory.Category.Cat
import Mathlib.CategoryTheory.Category.Cat.Adjunction
import Mathlib.CategoryTheory.Monoidal.OfChosenFiniteProducts.Basic
import Mathlib.CategoryTheory.Types
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Limits.Types
import Mathlib.CategoryTheory.Limits.Presheaf
import Mathlib.CategoryTheory.Monoidal.Category
import Mathlib.CategoryTheory.Monoidal.Types.Basic
import Mathlib.CategoryTheory.Products.Associator
import Mathlib.CategoryTheory.Products.Basic
import Mathlib.CategoryTheory.Products.Bifunctor
import Mathlib.CategoryTheory.Functor.Currying
import Mathlib.CategoryTheory.Functor.KanExtension.Basic
import Mathlib.CategoryTheory.PUnit
import Mathlib.CategoryTheory.Functor.KanExtension.Pointwise
import Mathlib.CategoryTheory.Bicategory.Basic

/-!
# Distributors

Distributors generalize functors like relations generalizes functions

## Notes

## TODO


## references

- Distributor at work
- Les distributeurs

-/


universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ v‚ÇÖ u u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÖ

namespace CategoryTheory
set_option linter.longLine false


variable (X : Type u ) [Category.{v} X]
variable (A : Type u‚ÇÅ ) [Category.{u‚ÇÅ+1} A]
variable {B : Type u‚ÇÇ } [Category.{u‚ÇÇ+1} B]
variable (C : Type u‚ÇÉ ) [Category.{u‚ÇÉ+1} C]
variable (D : Type u‚ÇÑ ) [Category.{v‚ÇÑ} D]

abbrev Dist := D·µí·µñ √ó C ‚•§ Type

variable (P : Dist A B)
variable (F : D √ó C ‚•§ Type)

open MonoidalCategory
open CategoryTheory.Bifunctor
open Limits




def mycolimit : (X ‚•§ Type u) ‚•§  Type u := sorry


-------
def times (P : Dist A B) (Q: Dist C D) :  Dist (A √ó C) (B √ó D) :=
  let plug  : (B √ó D)·µí·µñ  √ó (A √ó C) ‚•§ (B·µí·µñ √ó A) √ó D·µí·µñ √ó C  :=
    Functor.prod ((prodOpEquiv B).functor) (ùü≠ _) ‚ãô prod.associator _ _ _ ‚ãô
    Functor.prod (ùü≠ _)  (prod.inverseAssociator  _ _ _ ) ‚ãô
    Functor.prod (ùü≠ _) (Functor.prod (Prod.swap _ _) (ùü≠ _) ) ‚ãô
     Functor.prod (ùü≠ _) (prod.associator _ _ _) ‚ãô
    (prod.inverseAssociator  _ _ _ )
  plug ‚ãô Functor.prod P Q ‚ãô MonoidalCategory.tensor Type

def op (P : Dist A B) :  Dist B·µí·µñ A·µí·µñ :=
  let plug  : (A·µí·µñ)·µí·µñ  √ó B·µí·µñ ‚•§ B·µí·µñ √ó A := Functor.prod (unopUnop _) (ùü≠ _) ‚ãô Prod.swap _ _
  plug ‚ãô P

def extend (F : B·µí·µñ √ó B ‚•§ Type (u‚ÇÇ+1)) : (Functor.hom B).Elements ‚•§ Type (u‚ÇÇ+1)  :=
  CategoryOfElements.œÄ (Functor.hom B) ‚ãô F

noncomputable def coendl : (B·µí·µñ √ó B ‚•§ Type (u‚ÇÇ+1)) ‚•§ (Type (u‚ÇÇ+1)) where
  obj (f : B·µí·µñ √ó B ‚•§ Type (u‚ÇÇ + 1)) := Limits.colimit (extend f)
  map {f g} (n : f ‚ü∂ g) :=
      (colimit.isColimit (extend f)).desc
        ((Cocones.precompose (whiskerLeft (CategoryOfElements.œÄ (Functor.hom B)) n)).obj
         (colimit.cocone (extend g)))
  map_id := sorry
  map_comp := sorry


def comp (P : Dist A B) (Q: Dist B C) : Dist A C  :=
  let PtimesQ : ((‚ÜëB)·µí·µñ √ó ‚ÜëB) √ó (C·µí·µñ √ó A) ‚•§ Type :=
    prod.associator _ _ _ ‚ãô Functor.prod (ùü≠ _)  (prod.inverseAssociator  _ _ _ ) ‚ãô
    Functor.prod (ùü≠ _) (Prod.swap _ _) ‚ãô prod.inverseAssociator _ _ _  ‚ãô
    Functor.prod (ùü≠ _) (Prod.swap _ _) ‚ãô Functor.prod P Q ‚ãô MonoidalCategory.tensor Type

  let mynicefunctor : (Functor.hom B).Elements ‚•§ C·µí·µñ √ó A ‚•§ Type := CategoryOfElements.œÄ (CategoryTheory.Functor.hom B) ‚ãô curryObj PtimesQ
  let myotherfunctor : (Functor.hom B).Elements ‚•§ C·µí·µñ √ó A ‚•§ Type := CategoryOfElements.œÄ (CategoryTheory.Functor.hom B) ‚ãô curryObj PtimesQ

  let ok1 := Limits.colimit (CategoryOfElements.œÄ (Functor.hom B) ‚ãô Functor.hom B)
  let sad := Limits.colimit (CategoryOfElements.œÄ (Functor.hom B) ‚ãô Functor.hom B)
  sorry




end CategoryTheory
