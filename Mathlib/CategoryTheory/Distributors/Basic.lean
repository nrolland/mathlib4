/-
Copyright (c) 2024 Nicolas Rolland. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicolas Rolland
-/
import Mathlib.CategoryTheory.Category.Cat.Adjunction
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Functor.Currying
import Mathlib.CategoryTheory.Functor.FullyFaithful
import Mathlib.CategoryTheory.Monoidal.Types.Basic
import Mathlib.CategoryTheory.Products.Associator
import Mathlib.CategoryTheory.Distributors.Coend
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.CategoryTheory.EqToHom
import Mathlib.Combinatorics.Quiver.Basic
/-!
# Distributors

Distributors generalize functors like relations generalizes functions

## Notes

## TODO

## references

- Distributor at work
- Les distributeurs
-/
namespace CategoryTheory.Distributors

set_option linter.longLine false

open CategoryTheory
open MonoidalCategory
open Limits

@[pp_with_univ]
abbrev Dist.{u, vโ, uโ, vโ, uโ} (A : Type uโ) [Category.{vโ} A] (B : Type uโ ) [Category.{vโ} B] := Bแตแต ร A โฅค Type u

universe u
variable {A : Type u } [Category.{u} A]
variable {B : Type u } [Category.{u} B]
variable {C : Type u } [Category.{u} C]
variable {D : Type u } [Category.{u} D]
variable {E : Type u } [Category.{u} E]
def plugOne : (B ร D)แตแต  ร (A ร C) โฅค (Bแตแต ร A) ร Dแตแต ร C  := Functor.prod ((prodOpEquiv B).functor) (๐ญ _) โ prod.associator _ _ _ โ Functor.prod (๐ญ _)  (prod.inverseAssociator  _ _ _ ) โ    Functor.prod (๐ญ _) (Functor.prod (Prod.swap _ _) (๐ญ _) ) โ     Functor.prod (๐ญ _) (prod.associator _ _ _) โ    (prod.inverseAssociator  _ _ _ )
def plugTwo   : (Cแตแต ร A) ร (Bแตแต ร B) โฅค  (B ร C)แตแต ร (A ร B)  := (prod.inverseAssociator  _ _ _ ) โ Functor.prod (Prod.swap _ _) (๐ญ _) โ Functor.prod (prod.inverseAssociator _ _ _) (๐ญ _) โ (prod.associator  _ _ _ ) โ Functor.prod ((prodOpEquiv B).inverse) (๐ญ _)


def prodFunctor : (A โฅค B) ร (C โฅค D) โฅค A ร C โฅค B ร D where
  obj FG := FG.1.prod FG.2
  map nm :=  NatTrans.prod nm.1 nm.2

-- @[simps]
-- protected def op (F : C โฅค D) : Cแตแต โฅค Dแตแต where
--   obj X := op (F.obj (unop X))
--   map f := (F.map f.unop).op


def prodFunctor' : (A โฅค B) โฅค  (C โฅค D) โฅค A ร C โฅค B ร D := curry.obj prodFunctor
def prodFunctor'' : (C โฅค D) โฅค (A โฅค B) โฅค  A ร C โฅค B ร D := curry.obj (Prod.swap _ _ โ prodFunctor )

def phi_1 : (A โฅค B) โฅค ((Bแตแต ร A) โฅค (Bแตแต ร B)) := prodFunctor'.obj (๐ญ Bแตแต)
def phi_2 : ((Bแตแต ร A) โฅค (Bแตแต ร B)) โฅค (Bแตแต ร A โฅค Type _) := (whiskeringRight _ _ _ ).obj (Functor.hom B)

def _phi1  :  (Aแตแต โฅค Bแตแต ) โฅค ((Aแตแต ร B) โฅค (Bแตแต ร B))  := prodFunctor''.obj (๐ญ B)


-- /-- `Vแตแต` reverses the direction of all arrows of `V`. -/
-- instance opposite {V} [Quiver V] : Quiver Vแตแต :=
--   โจfun a b => (unop b โถ unop a)แตแตโฉ

def opFunctor  :  (A โฅค B)แตแต โฅค (Aแตแต โฅค Bแตแต)  where
  obj f := Functor.op (Opposite.unop f)
  map {fop gop : (A โฅค B)แตแต} (nop : fop โถ gop) := {
    app := fun ao =>  Opposite.op ((Opposite.unop nop).app (Opposite.unop ao))
    naturality := fun _ _ uo => congrArg Quiver.Hom.op ((nop.unop.naturality uo.unop).symm)
  }


def opFunctor  :  (A โฅค B)แตแต โ (Aแตแต โฅค Bแตแต)  where
  obj f := Functor.op (Opposite.unop f)
  map {fop gop : (A โฅค B)แตแต} (nop : fop โถ gop) := {
    app := fun ao =>  Opposite.op ((Opposite.unop nop).app (Opposite.unop ao))
    naturality := fun _ _ uo => congrArg Quiver.Hom.op ((nop.unop.naturality uo.unop).symm)
  }


--def _phi2  :  ((Aแตแต ร B) โฅค (Bแตแต ร B)) โฅค  (Aแตแต ร B โฅค Type _)  := (whiskeringRight _ _ _ ).obj (Functor.hom B)

--- embeddings

def phi_ : (A โฅค B) โฅค ((Bแตแต ร A) โฅค Type _) := prodFunctor'.obj (๐ญ Bแตแต) โ (whiskeringRight _ _ _ ).obj (Functor.hom B)

--- def whatIwant : (A โฅค B) โฅค ((Bแตแต ร A) โฅค (Bแตแต ร B)) := prodFunctor ((๐ญ Bแตแต), (ยท) )
--- def whatIwant' : (A โฅค B) โฅค ((Bแตแต ร A) โฅค (Bแตแต ร B)) := prodFunctor ((ยท)แตแต, (๐ญ B))

-- def _phi : (A โฅค B) โฅค Dist B A := (curry.obj (Prod.swap _ _ โ prodFunctor)).obj (๐ญ B)

def preimage  {X Y : (A โฅค B)} (f : phi_.obj X โถ phi_.obj Y) : X โถ Y := sorry -- {X Y : C} (f : F.obj X โถ F.obj Y) : X โถ Y

instance : Functor.FullyFaithful (@phi_ A _ B _ ) where
  map_preimage {X Y : (A โฅค B)} (f : phi_.obj X โถ phi_.obj Y) : phi_.map (preimage f) = f := sorry
  preimage_map {X Y : (A โฅค B)} (f : X โถ Y) : preimage (phi_.map f) = f := sorry


--- product

def timesObj (P : Dist.{u} A B) (Q: Dist.{u} C D) : Dist.{u} (A ร C) (B ร D) :=
  plugOne โ  P.prod Q โ tensor (Type u)

def timesFunctor : (Dist.{u} A B) ร ( Dist.{u} C D) โฅค Dist.{u} (A ร C) (B ร D)  where
  obj := fun (P,Q) โฆ timesObj P Q
  map := fun (a,b) โฆ whiskerLeft plugOne (whiskerRight (NatTrans.prod a b) (tensor (Type u)))


--- All the fields of the bicategory Dist (without talking of the bicategory Dist)
def homCategory : Category (Dist A B) := by infer_instance

def compObj (P : Dist A B) (Q: Dist B C) : Dist A C  :=
  ((whiskeringRight _ _ _ ).obj myCoendPt).obj (curryObj (plugTwo โ timesObj P Q))

def id  (B : Type u) [Category.{u} B] : Dist B B  := Functor.hom B

def compObj_id (P : Dist A B) : compObj P (id B) โ P := sorry  -- low level<< ninja (=yo emb + tensor) < FF emb

def comp : (Dist.{u} A B) ร (Dist.{u} B C) โฅค  Dist.{u} A C  :=
  timesFunctor โ (whiskeringLeft _ _  _ ).obj plugTwo โ curry โ (whiskeringRight _ _ _ ).obj myCoendPt

def whiskerLeft  (f : Dist A B ) {g h : Dist B C } (ฮท : g โถ h) :
    comp.obj (f,g)  โถ comp.obj (f,h) := sorry -- from comp

def whiskerRight  {f g : Dist A B } (ฮท : f โถ g) (h : Dist B C) :
    comp.obj (f,h)  โถ comp.obj (g,h) := sorry -- from comp

def associator  (f : Dist A B ) (g : Dist B C ) (h : Dist C D ) :
    (comp.obj (comp.obj (f,g),h)) โ (comp.obj (f, comp.obj (g,h)))
  := sorry

def leftUnitor (f : Dist A B ) : comp.obj (id A, f) โ f := sorry

def rightUnitor (f : Dist A B ) : comp.obj (f, id B) โ f := sorry

def whiskerLeft_id  (f : Dist A B ) (g : Dist B C ) : whiskerLeft f (๐ g) = ๐ (comp.obj (f,g)) := sorry

def whiskerLeft_comp  (f : Dist A B) {g h i : Dist B C} (ฮท : g โถ h) (ฮธ : h โถ i) :
      whiskerLeft f (ฮท โซ ฮธ) = whiskerLeft f ฮท โซ whiskerLeft f ฮธ := sorry

def id_whiskerLeft  {f g : Dist A B} (ฮท : f โถ g) :
      whiskerLeft (id A ) ฮท = (leftUnitor f).hom โซ ฮท โซ (leftUnitor g).inv := sorry

def comp_whiskerLeft (f : Dist A B) (g : Dist B C ) {h h' : Dist C D } (ฮท : h โถ h') :
      whiskerLeft (comp.obj (f,g)) ฮท =
        (associator f g h).hom โซ whiskerLeft f (whiskerLeft g ฮท) โซ (associator f g h').inv := sorry

def id_whiskerRight   (f : Dist A B) (g : Dist B C) : whiskerRight (๐ f) g = ๐ (comp.obj (f,g)) := sorry

def comp_whiskerRight {f g h : Dist A B} (ฮท : f โถ g) (ฮธ : g โถ h) (i : Dist B C) :
      whiskerRight (ฮท โซ ฮธ) i = whiskerRight ฮท i โซ whiskerRight ฮธ i := sorry

def  whiskerRight_id  {f g : Dist A B} (ฮท : f โถ g) :   whiskerRight ฮท (id B ) = (rightUnitor f).hom โซ ฮท โซ (rightUnitor g).inv := sorry

def  whiskerRight_comp  {f f' : Dist A B} (ฮท : f โถ f') (g : Dist B C) (h : Dist C D) :
     whiskerRight ฮท (comp.obj (g,h)) =    (associator f g h).inv โซ whiskerRight (whiskerRight ฮท g) h โซ (associator f' g h).hom := sorry


def whisker_assoc (f : Dist A B) {g g' : Dist B C} (ฮท : g โถ g') (h : Dist C D) :
      whiskerRight (whiskerLeft f ฮท) h =    (associator f g h).hom โซ whiskerLeft f (whiskerRight ฮท h) โซ (associator f g' h).inv :=  sorry

def whisker_exchange  {f g : Dist A B } {h i : Dist B C } (ฮท : f โถ g) (ฮธ : h โถ i) :
      whiskerLeft f ฮธ โซ whiskerRight ฮท i = whiskerRight ฮท h โซ whiskerLeft g ฮธ := sorry

def pentagon  (f : Dist A B ) (g : Dist B C ) (h : Dist C D ) (i : Dist D E) :
      whiskerRight (associator f g h).hom i โซ
          (associator f (comp.obj (g, h)) i).hom โซ whiskerLeft f (associator g h i).hom =
        (associator (comp.obj (f,g)) h i).hom โซ (associator f g (comp.obj (h, i))).hom := sorry

def triangle (f : Dist A B ) (g : Dist B C ):
     (associator f (id B) g).hom โซ whiskerLeft f (leftUnitor g).hom = whiskerRight (rightUnitor f).hom g := sorry

end CategoryTheory.Distributors
