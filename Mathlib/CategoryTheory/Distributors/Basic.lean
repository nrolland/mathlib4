/-
Copyright (c) 2024 Nicolas Rolland. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicolas Rolland
-/
import Mathlib.CategoryTheory.Category.Cat.Adjunction
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Functor.Currying
import Mathlib.CategoryTheory.Monoidal.Types.Basic
import Mathlib.CategoryTheory.Products.Associator

/-!
# Distributors

Distributors generalize functors like relations generalizes functions

## Notes

## TODO


## references

- Distributor at work
- Les distributeurs

-/

section mysection_for_coend

open CategoryTheory

universe vโ uโ u
variable {B : Type uโ } [Category.{vโ} B]

def Functor.ElementsFunctor  : (B โฅค Type u) โฅค Cat.{vโ, max uโ u} where
  obj F := Cat.of.{vโ, max uโ u} (F.Elements :  Type (max uโ u) )
  map {F G} n := {
    obj := fun โจX,xโฉ โฆ  โจX, n.app X x โฉ
    map := fun โจX, xโฉ {Y} โจf,_โฉ โฆ
    match Y with | โจY, yโฉ => โจf, by have := congrFun (n.naturality f) x;aesop_catโฉ
  }

def mycolimit  : (B โฅค Type u) โฅค Type (max uโ u)
  := @Functor.ElementsFunctor B _ โ Cat.connectedComponents

def mycoend : (Bแตแต ร B โฅค Type u) โฅค  Type (max u uโ vโ) :=
  (CategoryTheory.whiskeringLeft _ _ _ ).obj (CategoryOfElements.ฯ (Functor.hom B)) โ mycolimit



end mysection_for_coend

namespace CategoryTheory
set_option linter.longLine false

open MonoidalCategory
open Limits

abbrev Dist.{u, vโ, uโ, vโ, uโ} (A : Type uโ) [Category.{vโ} A] (B : Type uโ ) [Category.{vโ} B] := Bแตแต ร A โฅค Type u

--- distributors
universe v vโ vโ vโ vโ vโ u uโ uโ uโ uโ uโ
variable {A : Type uโ } [Category.{vโ} A]
variable {B : Type uโ } [Category.{vโ} B]
variable {C : Type uโ } [Category.{vโ} C]
variable {D : Type uโ } [Category.{vโ} D]

def times (P : Dist.{u} A B) (Q: Dist.{u} C D) :  Dist.{u} (A ร C) (B ร D) :=
  let plug  : (B ร D)แตแต  ร (A ร C) โฅค (Bแตแต ร A) ร Dแตแต ร C  :=
    Functor.prod ((prodOpEquiv B).functor) (๐ญ _) โ prod.associator _ _ _ โ
    Functor.prod (๐ญ _)  (prod.inverseAssociator  _ _ _ ) โ
    Functor.prod (๐ญ _) (Functor.prod (Prod.swap _ _) (๐ญ _) ) โ
     Functor.prod (๐ญ _) (prod.associator _ _ _) โ
    (prod.inverseAssociator  _ _ _ )
  plug โ Functor.prod P Q โ MonoidalCategory.tensor (Type u)

def op (P : Dist.{u} A B) :  Dist.{u} Bแตแต Aแตแต :=
  let plug  : (Aแตแต)แตแต  ร Bแตแต โฅค Bแตแต ร A := Functor.prod (unopUnop _) (๐ญ _) โ Prod.swap _ _
  plug โ P

---
def comp (P : Dist.{u} A B) (Q: Dist.{u} B C) : Dist.{max u uโ vโ} A C  :=
  let plug :  (Cแตแต ร A) ร (Bแตแต ร B) โฅค   (B ร C)แตแต ร (A ร B)  := (prod.inverseAssociator  _ _ _ ) โ Functor.prod (Prod.swap _ _) (๐ญ _) โ Functor.prod (prod.inverseAssociator _ _ _) (๐ญ _) โ (prod.associator  _ _ _ ) โ Functor.prod ((prodOpEquiv B).inverse) (๐ญ _)
  let pq : Cแตแต ร A โฅค Bแตแต ร B โฅค Type u := curryObj (plug โ times P Q)

  let that_increase_universe : ((Cแตแต ร A) โฅค (Bแตแต ร B โฅค Type u)) โฅค ((Cแตแต ร A) โฅค  Type (max u uโ vโ)) := (CategoryTheory.whiskeringRight _ _ _ ).obj mycoend
  that_increase_universe.obj pq


end CategoryTheory
