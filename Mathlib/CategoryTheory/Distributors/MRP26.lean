/-
Copyright (c) 2024 Nicolas Rolland. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicolas Rolland
-/
import Mathlib.CategoryTheory.Category.Cat.Adjunction
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Functor.Currying
import Mathlib.CategoryTheory.Monoidal.Types.Basic
import Mathlib.CategoryTheory.Products.Associator
import Mathlib.CategoryTheory.Distributors.End
/-!
# Distributors

Distributors generalize functors like relations generalizes functions

## Notes

## TODO

## references

- Distributor at work
- Les distributeurs
-/

namespace CategoryTheory.Distributors

set_option linter.longLine false

open CategoryTheory
open MonoidalCategory
open Limits

abbrev Dist.{u, v‚ÇÇ, u‚ÇÇ, v‚ÇÅ, u‚ÇÅ} (A : Type u‚ÇÅ) [Category.{v‚ÇÅ} A] (B : Type u‚ÇÇ ) [Category.{v‚ÇÇ} B] := B·µí·µñ √ó A ‚•§ Type u

--- distributors
universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ v‚ÇÖ u u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÖ
variable {A : Type u‚ÇÅ } [Category.{v‚ÇÅ} A]
variable {B : Type u‚ÇÇ } [Category.{v‚ÇÇ} B]
variable {C : Type u‚ÇÉ } [Category.{v‚ÇÉ} C]
variable {D : Type u‚ÇÑ } [Category.{v‚ÇÑ} D]



def plug : (B √ó D)·µí·µñ  √ó (A √ó C) ‚•§ (B·µí·µñ √ó A) √ó D·µí·µñ √ó C  := sorry -- Functor.prod ((prodOpEquiv B).functor) (ùü≠ _) ‚ãô prod.associator _ _ _ ‚ãô Functor.prod (ùü≠ _)  (prod.inverseAssociator  _ _ _ ) ‚ãô    Functor.prod (ùü≠ _) (Functor.prod (Prod.swap _ _) (ùü≠ _) ) ‚ãô     Functor.prod (ùü≠ _) (prod.associator _ _ _) ‚ãô    (prod.inverseAssociator  _ _ _ )

def aassd : ((B √ó C)·µí·µñ √ó (A √ó B) ‚•§ Type u) ‚•§ (C·µí·µñ √ó A) √ó (B·µí·µñ √ó B) ‚•§ Type u :=
  (whiskeringLeft _ _  _ ).obj plug



end CategoryTheory.Distributors
