import Mathlib.CategoryTheory.Category.Cat.Adjunction
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Limits.FinallySmall
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Limits.HasLimits
import Mathlib.CategoryTheory.Products.Bifunctor
import Mathlib.CategoryTheory.Limits.Shapes.Terminal

open CategoryTheory
open Limits

universe vโ vโ vm uโ uโ u um
variable {J : Type uโ} [Category.{vโ} J]
-- variable {A : Type uโ } [Category.{vโ} A]
variable {B : Type uโ } [Category.{vโ} B]
variable {M : Type vm } [Category.{um} M]



variable (F : (BแตแตรB) โฅค M)

structure Wedge : Type (max (max um uโ) vm) where
  pt : M
  leg (c:B) : pt โถ F.obj (Opposite.op c,c)
  wedgeCondition : โ โฆc c' : Bโฆ (f : c โถ c'),
    (leg c โซ F.map ((๐ c).op,f) : pt โถ F.obj (Opposite.op c, c'))
     = (leg c' โซ F.map (f.op, ๐ c')  : pt โถ F.obj (Opposite.op c, c')) := by aesop_cat

structure WedgeMorphism (x y : Wedge F) where
  Hom : x.pt โถ y.pt
  fac : โ (c : B),
    Hom โซ y.leg c = x.leg c := by aesop_cat

attribute [simp] WedgeMorphism.fac

instance : Category (Wedge F) where
  Hom := fun x y => WedgeMorphism _ x y
  id := fun x => {  Hom := ๐ x.pt }
  comp := fun f g =>  { Hom := f.Hom โซ g.Hom}

-- limits ---
set_option linter.longLine false
structure IsTerminalSimple (t : B) where
  lift : โ s : B, s โถ t
  uniq : โ (s : B) (m : s โถ t), m = lift s := by   aesop_cat

def IsTerminalUnique (t:B) := โ X : B, Unique (X โถ t)
def equiv1 (t:B) : (IsTerminalSimple t) โ IsTerminalUnique t where
  hom (ts) x := { default := ts.lift x, uniq := ts.uniq x}
  inv w := { lift := fun s => (w s).default, uniq := fun s => (w s).uniq}

def equiv2 (t : B) : (IsTerminalSimple t) โ IsLimit (asEmptyCone t ) where
  hom w :=  IsTerminal.ofUniqueHom (w.lift) (w.uniq)
  inv w := { lift := fun s =>  w.lift (asEmptyCone s)
             uniq :=  fun s m => w.uniq (asEmptyCone s) m (fun โจjโฉ => j.elim) }

def wr {a b : B} {i j : J} (fu : (a โถ b)  ร  (i โถ j)) : ((a,i) โถ (b,j)) := (fu.1, fu.2)


lemma wre {a b : B} {i j : J} (fg : (a,i) โถ (b,j)) : wr fg =  fg := rfl

def wrl  {a b c : B} {i j k : J} (fg : (a,i) โถ (b,j)) (u : b โถ c) (v : j โถ k) :
    fg โซ wr (u, v ) = (fg.1 โซ u, fg.2 โซ v) := rfl


def awedgeisacone (w : Wedge F) : Cone (CategoryOfElements.ฯ (Functor.hom B) โ F ) := {
  pt := w.pt
  ฯ := {
    app  := fun (โจ(bo,b'),fโฉ) => w.leg bo.unop โซ F.map (๐ bo, f)
    naturality := fun (โจ(bop,b'),fโฉ) (โจ(cop,c'),gโฉ)
      (โจ(uo, (v : b' โถ c') ),(h : (Functor.hom B).map (uo, v) f = g)โฉ)  => by
        let b := bop.unop
        let c := cop.unop
        let u : c โถ b := uo.unop
        let f : b โถ b' := f
        let h :  u โซ f โซ v = g := h

        simp
        calc
        w.leg c โซ F.map (๐ cop, g) =  w.leg c โซ F.map (๐ cop, u โซ f โซ v) := by rw [<- h]
        _  =  w.leg c โซ F.map ( wr (๐ cop, u ) โซ wr (๐ cop, f ) โซ wr (๐ cop, v) ) :=
          have :  (๐ cop โซ ๐ cop โซ ๐ cop, u โซ f โซ v) =  wr (๐ cop, u ) โซ wr (๐ cop, f ) โซ wr (๐ cop, v) := rfl
          have  : (๐ cop, u โซ f โซ v) =   wr (๐ cop, u ) โซ wr (๐ cop, f ) โซ wr (๐ cop, v) := by simp_all only [Category.comp_id]
          by rw [this]
        _  =  w.leg c โซ F.map ( wr (๐ cop, u ) )โซ F.map (wr (๐ cop, f )) โซ F.map  (wr (๐ cop, v) ) := by rw [F.map_comp, F.map_comp]
        _  = ( w.leg c โซ F.map ( wr (๐ cop, u ) ))โซ F.map (wr (๐ cop, f )) โซ F.map  (wr (๐ cop, v) ) := by rw [Category.assoc]
        _  =  (w.leg b โซ F.map ( wr (uo, ๐ b ))) โซ F.map (wr (๐ cop, f )) โซ F.map (wr (๐ cop, v) ) := by
          have : (w.leg c โซ F.map (wr (๐ cop, u))) = w.leg b โซ F.map ( wr (uo, ๐ b )) := w.wedgeCondition u
          rw [this]
        _  =  w.leg b โซ (F.map ( wr (uo, ๐ b )) โซ F.map (wr (๐ cop, f )) โซ F.map (wr (๐ cop, v) )) :=  by rw [Category.assoc]
        _  =  w.leg b โซ ((F.map ( wr (uo, ๐ b )) โซ F.map (wr (๐ cop, f ))) โซ F.map (wr (๐ cop, v) )) :=  by rw [Category.assoc]
        _  =  w.leg b โซ ((F.map (wr (uo, ๐ b ) โซ wr (๐ cop, f ))) โซ F.map (wr (๐ cop, v) )) := by rw [<- F.map_comp]
        _  =  w.leg b โซ ((F.map (wr (uo, f ))) โซ F.map (wr (๐ cop, v) )) := by
            have :  F.map (wr (uo, ๐ b )) โซ F.map (wr (๐ cop, f )) =  F.map (wr (uo, ๐ b ) โซ wr (๐ cop, f ))  := by rw [<- F.map_comp]
            have :  w.leg b โซ ((F.map (wr (uo, ๐ b )) โซ F.map (wr (๐ cop, f ))) โซ F.map (wr (๐ cop, v) )) =  w.leg b โซ ((F.map (wr (uo, f ))) โซ F.map (wr (๐ cop, v) ))  := by
                  have :  F.map (wr (uo, ๐ b )) โซ F.map ( wr (๐ cop, f )) = F.map (wr (uo, f ))  :=
                    have : wr (uo, ๐ b ) โซ wr (๐ cop, f ) = wr (uo โซ ๐ cop, ๐ b  โซ f )  := rfl
                    by simp_all only [Category.comp_id,  Category.id_comp]
                  rw [this]
            simp_all only [Category.comp_id,  Category.id_comp]
        _ = w.leg b โซ ( (F.map (wr (๐ bop, f ))โซ F.map ( wr (uo, ๐ b' ) )) โซ F.map (wr (๐ cop, v) )) := by
          have :  w.leg b โซ ((F.map (wr (uo, f ))) โซ F.map (wr (๐ cop, v) )) =  w.leg b โซ ( (F.map (wr (๐ bop, f ))โซ F.map ( wr (uo, ๐ b' ) )) โซ F.map (wr (๐ cop, v) ))  := by
            have :   F.map ( wr (๐ bop, f )) โซ F.map (wr (uo, ๐ b' )) = F.map (wr (uo, f ))     :=
              have soo :  wr (๐ bop, f ) โซ wr (uo, ๐ b' ) = wr (๐ bop โซ uo, f  โซ ๐ b')  := rfl
              have aa : F.map ( wr (๐ bop, f )) โซ F.map (wr (uo, ๐ b' )) = F.map ( wr (๐ bop, f ) โซ wr (uo, ๐ b' )) := by rw [F.map_comp]
              by simp_all only [Category.comp_id, Category.id_comp]
            rw [<- this]
          simp_all only [Category.comp_id, Category.id_comp]
        _ = (w.leg b โซ  (F.map (wr (๐ bop, f ))))โซ F.map ( wr (uo, ๐ b' ) ) โซ F.map (wr (๐ cop, v) ) := by  simp_all only [Category.assoc]
        _ = (w.leg b โซ  F.map (wr (๐ bop, f )))โซ  F.map (wr (uo, v)) := by
            have a : wr (uo โซ ๐ cop, ๐ b'  โซ v ) = wr (uo , v )  := by simp_all only [Category.comp_id, Category.id_comp]
            have b : wr (uo, ๐ b' ) โซ wr (๐ cop, v ) = wr (uo โซ ๐ cop, ๐ b'  โซ v )  := rfl
            have c : F.map ( wr (uo, ๐ b' )) โซ F.map (wr (๐ cop, v) ) = F.map ( wr (uo, ๐ b' )โซ wr (๐ cop, v) ) := by rw [F.map_comp]
            rw [c, b , a ]
        _ = w.leg b โซ F.map (๐ bop, f) โซ F.map (uo, v)    :=  by rw [<- Category.assoc];rfl
        }
}


-- missing : a wedge for F is a cone for F . pi
-- missing : un wedge pour F est un cone pour F . p
-- missing : un terminal wedge pour F est terminal cone pour F . p -- terminal + iso
-- missing Nat(F,G) โ end B(F-,G=)



---



/-- end is a terminal wedges -/
noncomputable def end_summit [HasTerminal (Wedge F)] := terminal (Wedge F)

def endCone [Limits.HasLimit ((CategoryOfElements.ฯ (Functor.hom B)) โ F)] : Type _ :=
  Limits.LimitCone ((CategoryOfElements.ฯ (Functor.hom B)) โ F)
