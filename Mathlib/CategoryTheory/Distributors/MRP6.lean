import Mathlib.CategoryTheory.Monoidal.Types.Basic
import Mathlib.CategoryTheory.Products.Associator
import Mathlib.CategoryTheory.Products.Basic

namespace CategoryTheory

variable (A B C D : Type*) [Category A] [Category B] [Category C] [Category D]

abbrev Dist := Dแตแต ร C โฅค Type

def times (P : Dist A B) (Q: Dist C D) :  Dist (A ร C) (B ร D) :=
  let plug  : (B ร D)แตแต  ร (A ร C) โฅค (Bแตแต ร A) ร Dแตแต ร C  :=
    Functor.prod ((prodOpEquiv B).functor) (๐ญ _) โ prod.associator _ _ _ โ
    Functor.prod (๐ญ _)  (prod.inverseAssociator  _ _ _ ) โ
    Functor.prod (๐ญ _) (Functor.prod (Prod.swap _ _) (๐ญ _) ) โ
     Functor.prod (๐ญ _) (prod.associator _ _ _) โ
    (prod.inverseAssociator  _ _ _ )
  plug โ Functor.prod P Q โ MonoidalCategory.tensor Type

end CategoryTheory
