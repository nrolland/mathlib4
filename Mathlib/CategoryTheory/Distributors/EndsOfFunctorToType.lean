
import Mathlib.CategoryTheory.Distributors.Ends
import Mathlib.CategoryTheory.Distributors.Coends
import Mathlib.CategoryTheory.Category.Cat.Adjunction
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Limits.FinallySmall
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Limits.HasLimits
import Mathlib.CategoryTheory.Limits.Shapes.Terminal

open CategoryTheory
open Limits

universe v‚ÇÇ u‚ÇÇ u vm um
variable {B : Type u‚ÇÇ } [Category.{v‚ÇÇ} B]
variable {M : Type vm } [Category.{um} M]
variable (F : (B·µí·µñ√óB) ‚•§ M)

-- bientot  Mathlib/CategoryTheory/Elements.lean
def NatTrans.mapElements {F G : B ‚•§ Type _} (œÜ : F ‚ü∂ G) : F.Elements ‚•§ G.Elements where
  obj := fun ‚ü®X, x‚ü© ‚Ü¶ ‚ü®_, œÜ.app X x‚ü©
  map {p q} := fun ‚ü®f,h‚ü© ‚Ü¶ ‚ü®f, by have hb := congrFun (œÜ.naturality f) p.2; aesop_cat‚ü©
-- bientot Mathlib/CategoryTheory/Elements.lean
def Functor.ElementsFunctor : (B ‚•§ Type u) ‚•§ Cat.{v‚ÇÇ, max u‚ÇÇ u} where
  obj F := Cat.of.{v‚ÇÇ, max u‚ÇÇ u} (F.Elements :  Type (max u‚ÇÇ u) )
  map {F G} n := {
    obj := fun ‚ü®X,x‚ü© ‚Ü¶  ‚ü®X, n.app X x ‚ü©
    map := fun ‚ü®X, x‚ü© {Y} ‚ü®f,_‚ü© ‚Ü¶
    match Y with | ‚ü®Y, y‚ü© => ‚ü®f, by have := congrFun (n.naturality f) x;aesop_cat‚ü©}


--------------------------------------------------------------------------------------------------

def myCoendPt : (B·µí·µñ √ó B ‚•§  Type u) ‚•§  Type (max u‚ÇÇ u) where
  obj F := ConnectedComponents F.Elements -- je calcule
  map {f g} n :=
    let as :  Cat.of f.Elements ‚ü∂ Cat.of  g.Elements := NatTrans.mapElements n
    Cat.connectedComponents.map (as)
  map_id f := funext fun xq ‚Ü¶ by obtain ‚ü®x,rfl‚ü© := Quotient.exists_rep xq; rfl
  map_comp {f g h } n m := funext fun xq ‚Ü¶ by obtain ‚ü®x,rfl‚ü© := Quotient.exists_rep xq; rfl

/-- Each nadir is a cowedge -/
def myCoendObj (F : B·µí·µñ √ó B ‚•§ Type (max u u‚ÇÇ)) : (CoWedge F : Type (max (u + 1) (u‚ÇÇ + 1)))  where
  pt := myCoendPt.obj F -- je calcule
  leg b x := Quotient.mk _ ‚ü®(Opposite.op b, b),x‚ü©
  cowedgeCondition b b' f  := funext (fun x ‚Ü¶
    have z1 : @Zigzag (F.Elements) _  ‚ü®(Opposite.op b, b), F.map (f.op, ùüô b) x‚ü© _  :=
      Zigzag.of_inv ‚ü®(f.op, ùüô b),rfl‚ü©
    have z2 : @Zigzag (F.Elements) _  ‚ü®(Opposite.op b', b), x‚ü© _ :=
      Zigzag.of_hom ‚ü®((ùüô b').op, f),rfl‚ü©
    Quotient.sound ((z1).trans z2))

-- missing : this cowedege is initial in Cowedges

def colimitNadirFunctor : (B ‚•§ Type u) ‚•§ Type (max u‚ÇÇ u) :=
  @Functor.ElementsFunctor B _ ‚ãô Cat.connectedComponents -- je calcule

-- missing : this is initial cocone

def myCoendPt' : (B·µí·µñ √ó B ‚•§ Type u) ‚•§  Type (max u u‚ÇÇ v‚ÇÇ) := -- je calcule
  (CategoryTheory.whiskeringLeft _ _ _ ).obj (CategoryOfElements.œÄ (Functor.hom B)) ‚ãô colimitNadirFunctor

-- missing : the corresponding cowedge for F is initial

--------------------------------------------------------------------------------------------------


def myEndPt : (B·µí·µñ √ó B ‚•§  Type u) ‚•§  Type (max u‚ÇÇ u) where
  obj F := sorry
  map {f g} n := sorry
  map_id f := sorry
  map_comp {f g h } n m := sorry

/-- Each summit is a wedge -/
def myEndObj (F : B·µí·µñ √ó B ‚•§ Type (max u u‚ÇÇ)) : (Wedge F : Type _)  where
  pt := sorry
  leg b x := sorry
  wedgeCondition b b' f  := sorry

-- missing : this wedge is terminal in Wedge

def myLimitPt : (B ‚•§ Type u) ‚•§ Type (max u‚ÇÇ u)
  := sorry

-- missing : this is terminal cone tip

def end_summit' : (B·µí·µñ √ó B ‚•§ Type u) ‚•§  Type (max u u‚ÇÇ v‚ÇÇ) :=
  (CategoryTheory.whiskeringLeft _ _ _ ).obj (CategoryOfElements.œÄ (Functor.hom B)) ‚ãô myLimitPt


-- missing : the corresponding wedge is termina


--------------------------------------------------------------------------------------------------

variable {A : Type u‚ÇÇ } [Category.{v‚ÇÇ} A]


-- def NatIsCoend {f : A ‚•§ B} {g : A ‚•§ B} :
--   (Quiver.Hom (A ‚•§ B) _ f g ) = End () := sorry
