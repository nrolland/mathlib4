/-
Copyright (c) 2024 Nicolas Rolland. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicolas Rolland
-/
import Mathlib.CategoryTheory.Category.Cat
import Mathlib.CategoryTheory.Category.Cat.Adjunction
import Mathlib.CategoryTheory.Monoidal.OfChosenFiniteProducts.Basic
import Mathlib.CategoryTheory.Types
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Limits.Types
import Mathlib.CategoryTheory.Limits.Presheaf
import Mathlib.CategoryTheory.Monoidal.Category
import Mathlib.CategoryTheory.Monoidal.Types.Basic
import Mathlib.CategoryTheory.Products.Associator
import Mathlib.CategoryTheory.Products.Basic
import Mathlib.CategoryTheory.Products.Bifunctor
import Mathlib.CategoryTheory.Functor.Currying
import Mathlib.CategoryTheory.Functor.KanExtension.Basic
import Mathlib.CategoryTheory.PUnit
import Mathlib.CategoryTheory.Functor.KanExtension.Pointwise
import Mathlib.CategoryTheory.Bicategory.Basic
import Mathlib.CategoryTheory.Comma.Basic
import Mathlib.CategoryTheory.Limits.Shapes.Terminal

/-!
# Distributors

Distributors generalize functors like relations generalizes functions

## Notes

## TODO


## references

- Distributor at work
- Les distributeurs

-/

section mysection_for_coend

open CategoryTheory

universe v‚ÇÇ u‚ÇÇ u vm um
variable {B : Type u‚ÇÇ } [Category.{v‚ÇÇ} B]
variable {M : Type vm } [Category.{um} M]
variable (F : (B·µí·µñ√óB) ‚•§ M)


structure Wedge  where
  pt : M
  leg (b:B) : pt ‚ü∂ F.obj (Opposite.op b,b)
  wedgeCondition : ‚àÄ ‚¶Éc c' : B‚¶Ñ (f : c ‚ü∂ c'),
    (leg c ‚â´ F.map ((ùüô c).op,f) : pt ‚ü∂ F.obj (Opposite.op c, c'))
     = (leg c' ‚â´ F.map (f.op, ùüô c')  : pt ‚ü∂ F.obj (Opposite.op c, c'))  := by aesop_cat

structure WedgeMorphism (x y : Wedge F) where
  Hom : x.pt ‚ü∂ y.pt
  wedgeCondition : ‚àÄ (c : B), Hom ‚â´ y.leg c = x.leg c  := by aesop_cat

attribute [simp] WedgeMorphism.wedgeCondition

-- The category of Wedges
instance  (F : (B·µí·µñ√óB) ‚•§ M) : Category (Wedge F) where
  Hom := fun x y => WedgeMorphism _ x y
  id := fun x => {Hom := ùüô x.pt}
  comp := fun f g => { Hom := f.Hom ‚â´ g.Hom }

def myCoendType  (F : B·µí·µñ √ó B ‚•§ Type u) :  Type _  := Œ£b : B, F.obj (Opposite.op b,b)

def myCoend  (F : B·µí·µñ √ó B ‚•§ Type u)  : Wedge F  where
  pt := myCoendType F
  leg := sorry
  wedgeCondition := sorry


--instance  (F : B·µí·µñ √ó B ‚•§ Type u)  : IsTerminal (myCoEnd F : _ ) where := sorry

end mysection_for_coend

namespace CategoryTheory
set_option linter.longLine false

open MonoidalCategory
open CategoryTheory.Bifunctor
open Limits

abbrev Dist.{u, v‚ÇÇ, u‚ÇÇ, v‚ÇÅ, u‚ÇÅ} (A : Type u‚ÇÅ) [Category.{v‚ÇÅ} A] (B : Type u‚ÇÇ ) [Category.{v‚ÇÇ} B] := B·µí·µñ √ó A ‚•§ Type u

--- distributors
universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ v‚ÇÖ u u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ u‚ÇÖ
variable {A : Type u‚ÇÅ } [Category.{v‚ÇÅ} A]
variable {B : Type u‚ÇÇ } [Category.{v‚ÇÇ} B]
variable {C : Type u‚ÇÉ } [Category.{v‚ÇÉ} C]
variable {D : Type u‚ÇÑ } [Category.{v‚ÇÑ} D]

def times (P : Dist.{u} A B) (Q: Dist.{u} C D) :  Dist.{u} (A √ó C) (B √ó D) :=
  let plug  : (B √ó D)·µí·µñ  √ó (A √ó C) ‚•§ (B·µí·µñ √ó A) √ó D·µí·µñ √ó C  :=
    Functor.prod ((prodOpEquiv B).functor) (ùü≠ _) ‚ãô prod.associator _ _ _ ‚ãô
    Functor.prod (ùü≠ _)  (prod.inverseAssociator  _ _ _ ) ‚ãô
    Functor.prod (ùü≠ _) (Functor.prod (Prod.swap _ _) (ùü≠ _) ) ‚ãô
     Functor.prod (ùü≠ _) (prod.associator _ _ _) ‚ãô
    (prod.inverseAssociator  _ _ _ )
  plug ‚ãô Functor.prod P Q ‚ãô MonoidalCategory.tensor (Type u)

def op (P : Dist.{u} A B) :  Dist.{u} B·µí·µñ A·µí·µñ :=
  let plug  : (A·µí·µñ)·µí·µñ  √ó B·µí·µñ ‚•§ B·µí·µñ √ó A := Functor.prod (unopUnop _) (ùü≠ _) ‚ãô Prod.swap _ _
  plug ‚ãô P

---
def comp (P : Dist.{u} A B) (Q: Dist.{u} B C) : Dist.{max u u‚ÇÇ v‚ÇÇ} A C  :=
  let plug :  (C·µí·µñ √ó A) √ó (B·µí·µñ √ó B) ‚•§   (B √ó C)·µí·µñ √ó (A √ó B)  := (prod.inverseAssociator  _ _ _ ) ‚ãô Functor.prod (Prod.swap _ _) (ùü≠ _) ‚ãô Functor.prod (prod.inverseAssociator _ _ _) (ùü≠ _) ‚ãô (prod.associator  _ _ _ ) ‚ãô Functor.prod ((prodOpEquiv B).inverse) (ùü≠ _)
  let pq : C·µí·µñ √ó A ‚•§ B·µí·µñ √ó B ‚•§ Type u := curryObj (plug ‚ãô times P Q)

  let that_increase_universe : ((C·µí·µñ √ó A) ‚•§ (B·µí·µñ √ó B ‚•§ Type u)) ‚•§ ((C·µí·µñ √ó A) ‚•§  Type (max u u‚ÇÇ v‚ÇÇ)) := (CategoryTheory.whiskeringRight _ _ _ ).obj mycoend

  that_increase_universe.obj pq


-- CategoryTheory.Functor.{v‚ÇÅ, v‚ÇÇ, u‚ÇÅ, u‚ÇÇ} (C : Type u‚ÇÅ) [Category.{v‚ÇÅ, u‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ, u‚ÇÇ} D] :  Type (max v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ)

def asdascomp (F : A  ‚•§ B) (G : B ‚•§ C) : A ‚•§ C where
  obj X := G.obj (F.obj X)
  map f := G.map (F.map f)
  map_comp := by intros; dsimp; rw [F.map_comp, G.map_comp]


end CategoryTheory
