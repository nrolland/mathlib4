/-
Copyright (c) 2024 Nicolas Rolland. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicolas Rolland
-/
import Mathlib.CategoryTheory.DiscreteCategory
import Mathlib.CategoryTheory.Types
import Mathlib.CategoryTheory.Category.Cat
import Mathlib.CategoryTheory.Adjunction.Basic

/-!
# Adjunctions related to Cat, the category of categories


The embedding `typeToCat : Type ‚•§ Cat`, which maps each type to a discrete category with elements
of that type as objects and has no morphism except the identities, has a right adjoint `Cat.objects`
mapping each category to its set of objects.

It also has a left adjoint `connectedComponents` which maps a category to its set of connected
components and functors to functions


-/


universe v u

namespace CategoryTheory

section AdjDiscObj

variable (X : Type u)
variable (C : Cat)

private def lxyToxry : (typeToCat.obj X ‚ü∂ C) ‚Üí (X ‚ü∂ Cat.objects.obj C) := fun f x ‚Ü¶ f.obj ‚ü®x‚ü©
private def xryTolxy : (X ‚ü∂ Cat.objects.obj C) ‚Üí (typeToCat.obj X ‚ü∂ C) := fun f ‚Ü¶ Discrete.functor f

private lemma linverse : Function.LeftInverse (xryTolxy X C) (lxyToxry X C) :=
  fun (fctr : typeToCat.obj X ‚•§ C) ‚Ü¶ by
  fapply Functor.hext
  ¬∑ intro x; rfl
  ¬∑ intro ‚ü®x‚ü© ‚ü®y‚ü© f
    simp
    obtain rfl := (Discrete.eq_of_hom f : x = y)
    calc
      (xryTolxy X C (lxyToxry X C fctr)).map f = ùüô (fctr.obj { as := x }) :=
        Discrete.functor_map_id (xryTolxy X C (lxyToxry X C fctr)) f
      _                                        = fctr.map f := (Discrete.functor_map_id fctr f).symm

private lemma rightinverse : Function.RightInverse (xryTolxy X C) (lxyToxry X C) := fun _ ‚Ü¶ by
  fapply funext
  intro x
  rfl

-- /-- The equivalence of categories `(J ‚Üí C) ‚âå (Discrete J ‚•§ C)`. -/
-- @[simps]
-- def piEquivalenceFunctorDiscrete (J : Type u‚ÇÇ) (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] :
--                                  (J ‚Üí C) ‚âå (Discrete J ‚•§ C) where
--   functor :=
--     { obj := fun F => Discrete.functor F
--       map := fun f => Discrete.natTrans (fun j => f j.as) }
--   inverse :=
--     { obj := fun F j => F.obj ‚ü®j‚ü©
--       map := fun f j => f.app ‚ü®j‚ü© }
--   unitIso := Iso.refl _
--   counitIso := NatIso.ofComponents (fun F => (NatIso.ofComponents (fun j => Iso.refl _)
--     (by
--       rintro ‚ü®x‚ü© ‚ü®y‚ü© f
--       obtain rfl : x = y := Discrete.eq_of_hom f
--       obtain rfl : f = ùüô _ := rfl
--       simp))) (by aesop_cat)

private def homEquiv : ‚àÄ X C, (typeToCat.obj X ‚ü∂ C) ‚âÉ (X ‚ü∂ Cat.objects.obj C) := fun X C ‚Ü¶ by
    apply Equiv.mk
      (lxyToxry X C)
      (xryTolxy X C)
      (linverse X C)
      (rightinverse X C)

private def counit_app : ‚àÄ C,  (Cat.objects ‚ãô typeToCat).obj C ‚•§ C := fun C =>
    { obj := Discrete.as
      map := eqToHom ‚àò Discrete.eq_of_hom }


/-- typeToCat : Type ‚•§ Cat is left adjoint to Cat.objects : Cat ‚•§ Type
-/
def adjTypeToCatCatobjects : typeToCat ‚ä£ Cat.objects where
  homEquiv  := homEquiv
  unit : ùü≠ (Type u) ‚ü∂ typeToCat ‚ãô Cat.objects := { app:= fun X  ‚Ü¶ Discrete.mk }
  counit : Cat.objects ‚ãô typeToCat ‚ü∂ ùü≠ Cat :=
  {
    app := counit_app
    naturality := by intro C D (f : C ‚•§ D)
                     fapply Functor.hext
                     ¬∑ intro c
                       rfl
                     ¬∑ intro ‚ü®_‚ü© ‚ü®_‚ü© f
                       obtain rfl := Discrete.eq_of_hom f
                       aesop_cat
  }

end AdjDiscObj


section AdjCC



section techniques
variable (X)
variable {C D : Cat}
variable {Œ± : Type u}
variable {a b : C}
variable (F : C ‚•§ D)

/-! # Relation induced by a category

A category induces a relation on its objects
Two objects are connected if there is an arrow between them.
This relation is not an equivalence, as only reflexivity holds in general.

`{a:C}{b:C} (f : a ‚ü∂ b) : isConnected a b := ‚ü®f, trivial‚ü©`
-/
def isConnected (c : C ) (d : C) : Prop := ‚àÉ _ : c ‚ü∂ d, True

/--
The relation is transported by functors
-/
lemma transport (h : isConnected a b) : isConnected (F.obj a) (F.obj b) := by
   obtain ‚ü®f,_‚ü© := h
   exact ‚ü®F.map f, trivial‚ü©


/-! ## Relation induced by a category

To make this relation an equivalence, one needs to take the equivalence closure
Two objects are connected if there is a zigzag of arrows between them.

-/
abbrev isConnectedByZigZag  : C ‚Üí C ‚Üí Prop   := EqvGen isConnected

private def relzz (f : a ‚ü∂ b) : isConnectedByZigZag a b := EqvGen.rel _ _ (‚ü®f, trivial‚ü©)


lemma transportExt  (h : isConnectedByZigZag a b ) : isConnectedByZigZag (F.obj a) (F.obj b) := by
  induction h
  case rel h => exact (EqvGen.rel _ _ (transport F h))
  case refl => exact EqvGen.refl _
  case symm w => exact EqvGen.symm _ _ w
  case trans f g => exact EqvGen.trans _ _ _ f g

--- Quotient based computation
def catisSetoid : Setoid C where
  r := EqvGen isConnected
  iseqv := EqvGen.is_equivalence isConnected


private def relsetoid (f : a ‚ü∂ b) : EqvGen isConnectedByZigZag a b := EqvGen.rel _ _ (relzz f )

-- Transport d'un x vers sa composante
def toCC (x : C) : Quotient (@catisSetoid C) := Quotient.mk (@catisSetoid C) x

private def releqq (f : a ‚ü∂ b) : toCC a = toCC b := Quot.EqvGen_sound (relsetoid f)


-- Ensemble des composantes d'une categorie
abbrev ccSet  (C : Cat) := Quotient (@catisSetoid C)

lemma transportExtQuot (a b : C) : isConnectedByZigZag a b ‚Üí toCC (F.obj a) = toCC (F.obj b) :=
    Quot.sound ‚àò transportExt F

private def fmap {X Y : Cat} (F : X ‚ü∂ Y) : (ccSet X) ‚Üí (ccSet Y) :=
    Quotient.lift (s:= @catisSetoid X)
                  (toCC ‚àò F.obj  : X ‚Üí ccSet Y)
                  (fun _ _ => Quot.sound ‚àò transportExt F )

private abbrev liftedMk (s : Setoid Œ±)  := Quotient.lift (Quotient.mk s) (fun _ _ => Quotient.sound)

private def quotDecomp {s : Setoid Œ±}  : ‚àÄ xt : Quotient s, (‚àÉ x, ‚ü¶x‚üß = xt) :=
  Quotient.ind (motive:= (‚àÉ x, Quotient.mk s x = ¬∑)) (by simp; exact ‚ü®¬∑, s.refl _‚ü©)

/- The functor for connected components -/
def connectedComponents : Cat.{v, u} ‚•§ Type u where
  obj C := ccSet C -- maps a category to its set of CC
  map F := fmap F  -- transport a functor to a function beetwen CC
  map_id X := by calc
      fmap (ùüô X) =  liftedMk (@catisSetoid X) := (rfl : fmap (ùüô X) = liftedMk (@catisSetoid X))
      _                       = fun x => x    := by funext xt; obtain ‚ü®x,h‚ü© := quotDecomp xt
                                                    simp [h.symm]
      _                       = ùüô (ccSet X)   := by rfl
  map_comp f g := by simp; funext xt; obtain ‚ü®_,h‚ü© := quotDecomp xt;
                     simp [h.symm];rfl

def eq_of_zigzag {a b : typeToCat.obj X } (h : isConnectedByZigZag a b) : a.as = b.as := by
  induction h with
  | rel _ _ h => let ‚ü®f,_‚ü© := h;exact Discrete.eq_of_hom f
  | refl => rfl
  | symm _ _ _ ih => exact ih.symm
  | trans _ _ _ _ _ ih1 ih2 => exact ih1.trans ih2

def transportZigzag (F : C ‚•§ D) (h : isConnectedByZigZag a b)
             : isConnectedByZigZag (F.obj a) ( F.obj b) := by
  induction h with
  | rel _ _ h => let ‚ü®f,_‚ü© := h; exact EqvGen.rel _ _  ‚ü®F.map f, trivial‚ü©
  | refl => exact EqvGen.refl _
  | symm _ _ _ ih => exact EqvGen.symm _ _ ih
  | trans _ _ _ _ _ ih1 ih2 => exact EqvGen.trans _ _ _ ih1 ih2

end techniques


section adjunctionCC
variable (X : Type u)
variable (C D : Cat)

def fnToFctr : (connectedComponents.obj C ‚ü∂ X) ‚Üí (C ‚•§ typeToCat.obj X) := fun fct =>
  { obj := fun x => x |> toCC |> fct |> Discrete.mk
    map := fun {a b} f => Discrete.eqToHom (congrArg fct (releqq f))
    map_id := by simp
    map_comp := by simp
  }


def fctrToFn :  (C ‚•§ typeToCat.obj X) ‚Üí (connectedComponents.obj C ‚ü∂ X) := fun fctr  =>
  Quotient.lift (s:= (@catisSetoid C))
     (fun c => (fctr.obj c).as)
     (fun _ _ h => eq_of_zigzag X (transportZigzag fctr h))

set_option linter.longLine false

private def linverse' : Function.LeftInverse (fctrToFn X C ) (fnToFctr X C ) :=
  fun (f : connectedComponents.obj C ‚ü∂ X) => by
    funext xcc
    obtain ‚ü®x,h‚ü© := quotDecomp xcc
    calc
      fctrToFn X C (fnToFctr X C f) xcc =  fctrToFn X C (fnToFctr X C f) ‚ü¶x‚üß := by rw [<- h]
      _  = ((fnToFctr X C f).obj x).as := rfl
      _  = f ‚ü¶x‚üß := rfl
      _  = f xcc := by rw [h]

private def rinverse' : Function.RightInverse (fctrToFn X C ) (fnToFctr X C ) :=
  fun (fctr : C ‚•§ (typeToCat.obj X)) => by
    fapply Functor.hext
    ¬∑ intro c; rfl
    ¬∑ intro c d f
      have cdeq : fctr.obj c = fctr.obj d := f |> fctr.map |> Discrete.eq_of_hom |> congrArg Discrete.mk
      let ident : (discreteCategory X).Hom (fctr.obj c) (fctr.obj d) := by rw [cdeq]; exact ùüô _
      let p := Subsingleton.helim rfl ident ((fnToFctr X C (fctrToFn X C fctr)).map f)
      exact (p.symm).trans (Subsingleton.helim rfl ident (fctr.map f) : HEq ident (fctr.map f))




def isadj_CC_TypeToCat : connectedComponents ‚ä£ typeToCat where
  homEquiv  := fun C X  ‚Ü¶ {
    toFun := fnToFctr X C
    invFun  := fctrToFn X C
    left_inv  := linverse' X C
    right_inv  := rinverse' X C
    }
  unit : ùü≠ Cat ‚ü∂ connectedComponents ‚ãô typeToCat := { app:= fun C  ‚Ü¶ fnToFctr _ _ (ùüô (ccSet C)) }
  counit : typeToCat ‚ãô connectedComponents ‚ü∂ ùü≠ (Type u) :=  {
      app := fun X => fctrToFn X (typeToCat.obj X) (ùüô (typeToCat.obj X) : typeToCat.obj X ‚•§ typeToCat.obj X)
      naturality := fun X Y f => by
        funext xcc
        obtain ‚ü®x,h‚ü© := quotDecomp xcc
        aesop_cat
   }
  homEquiv_unit := fun {C X h} => Functor.hext (fun _ => by rfl) (fun _ _ _ => by rfl)
  homEquiv_counit := fun {C X G} => by funext cc;obtain ‚ü®_,_‚ü© := quotDecomp cc; aesop_cat


end adjunctionCC

end AdjCC


end CategoryTheory
