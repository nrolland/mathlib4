/-
Copyright (c) 2024 Nicolas Rolland. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicolas Rolland
-/
import Mathlib.CategoryTheory.DiscreteCategory
import Mathlib.CategoryTheory.Types
import Mathlib.CategoryTheory.Category.Cat
import Mathlib.CategoryTheory.Adjunction.Basic

/-!
# Adjunctions related to Cat, the category of categories

The embedding `Type ‚•§ Cat` has a right adjoint `Cat.objects` mapping
each category to its set of objects.


## TODO
The embedding `Type ‚•§ Cat` has a left adjoint `Cat.connectedComponents` mapping
each category to its set of connected components.

-/


universe v u

namespace CategoryTheory

section AdjDiscObj

variable (X : Type u)
variable (C : Cat)

private def lxyToxry : (typeToCat.obj X ‚ü∂ C) ‚Üí (X ‚ü∂ Cat.objects.obj C) := fun f x ‚Ü¶ f.obj ‚ü®x‚ü©
private def xryTolxy : (X ‚ü∂ Cat.objects.obj C) ‚Üí (typeToCat.obj X ‚ü∂ C) := fun f ‚Ü¶ Discrete.functor f

private lemma linverse : Function.LeftInverse (xryTolxy X C) (lxyToxry X C) :=
  fun (fctr : typeToCat.obj X ‚•§ C) ‚Ü¶ by
  fapply Functor.hext
  ¬∑ intro x; rfl
  ¬∑ intro ‚ü®x‚ü© ‚ü®y‚ü© f
    simp
    obtain rfl := (Discrete.eq_of_hom f : x = y)
    calc
      (xryTolxy X C (lxyToxry X C fctr)).map f = ùüô (fctr.obj { as := x }) :=
        Discrete.functor_map_id (xryTolxy X C (lxyToxry X C fctr)) f
      _                                        = fctr.map f := (Discrete.functor_map_id fctr f).symm

private lemma rightinverse : Function.RightInverse (xryTolxy X C) (lxyToxry X C) := fun _ ‚Ü¶ by
  fapply funext
  intro x
  rfl

private def homEquiv : ‚àÄ X C, (typeToCat.obj X ‚ü∂ C) ‚âÉ (X ‚ü∂ Cat.objects.obj C) := fun X C ‚Ü¶ by
    apply Equiv.mk
      (lxyToxry X C)
      (xryTolxy X C)
      (linverse X C)
      (rightinverse X C)

private def counit_app : ‚àÄ C,  (Cat.objects ‚ãô typeToCat).obj C ‚•§ C := fun C =>
    { obj := Discrete.as
      map := eqToHom ‚àò Discrete.eq_of_hom }


/-- typeToCat : Type ‚•§ Cat is left adjoint to Cat.objects : Cat ‚•§ Type
-/
def adjTypeToCatCatobjects : typeToCat ‚ä£ Cat.objects where
  homEquiv  := homEquiv
  unit : ùü≠ (Type u) ‚ü∂ typeToCat ‚ãô Cat.objects := { app:= fun X  ‚Ü¶ Discrete.mk }
  counit : Cat.objects ‚ãô typeToCat ‚ü∂ ùü≠ Cat :=
  {
    app := counit_app
    naturality := by intro C D (f : C ‚•§ D)
                     fapply Functor.hext
                     ¬∑ intro c
                       rfl
                     ¬∑ intro ‚ü®_‚ü© ‚ü®_‚ü© f
                       obtain rfl := Discrete.eq_of_hom f
                       aesop_cat
  }

end AdjDiscObj


section AdjCC

variable (X : Type u)
variable {C D : Cat}
variable {Œ± : Type u}
variable {a b : C}
variable (F : C ‚•§ D)

/-! # Relation induced by a category

A category induces a relation on its objects
Two objects are connected if there is an arrow between them.
This relation is not an equivalence, as only reflexivity holds in general.

`{a:C}{b:C} (f : a ‚ü∂ b) : isConnected a b := ‚ü®f, trivial‚ü©`
-/
def isConnected (c : C ) (d : C) : Prop := ‚àÉ _ : c ‚ü∂ d, True

/--
The relation is transported by functors
-/
lemma transport (h : isConnected a b) : isConnected (F.obj a) (F.obj b) := by
   obtain ‚ü®f,_‚ü© := h
   exact ‚ü®F.map f, trivial‚ü©


/-! ## Relation induced by a category

To make this relation an equivalence, one needs to take the equivalence closure
Two objects are connected if there is a zigzag of arrows between them.

-/
abbrev isConnectedByZigZag  : C ‚Üí C ‚Üí Prop   := EqvGen isConnected

private def rel {a:C}{b:C} (f : a ‚ü∂ b) : isConnectedByZigZag a b := EqvGen.rel _ _ (‚ü®f, trivial‚ü©)


lemma transportExt  (h : isConnectedByZigZag a b ) : isConnectedByZigZag (F.obj a) (F.obj b) := by
  induction h
  case rel h => exact (EqvGen.rel _ _ (transport F h))
  case refl => exact EqvGen.refl _
  case symm w => exact EqvGen.symm _ _ w
  case trans f g => exact EqvGen.trans _ _ _ f g

-- Other formulation
-- def isConnectedByQuotEq (a b : C) := Quot.mk isConnected a = Quot.mk isConnected  b
-- lemma functorialityQuotClosed : isConnectedByQuotEq a b ‚Üí
--                                 isConnectedByQuotEq (F.obj a) (F.obj b) :=
--    Quot.EqvGen_sound ‚àò transportExt F ‚àò Quot.exact isConnected

--- Quotient based computation
def catisSetoid : Setoid C where
  r := isConnectedByZigZag
  iseqv := EqvGen.is_equivalence isConnected

-- Transport d'un x vers sa composante
def toCC (x : C) : Quotient (@catisSetoid C) := Quotient.mk (@catisSetoid C) x

-- Ensemble des composantes d'une categorie
abbrev ccSet  (C : Cat) := Quotient (@catisSetoid C)

lemma transportExtQuot (a b : C) : isConnectedByZigZag a b ‚Üí toCC (F.obj a) = toCC (F.obj b) :=
    Quot.sound ‚àò transportExt F

private def fmap {X Y : Cat} (F : X ‚ü∂ Y) : (ccSet X) ‚Üí (ccSet Y) :=
    Quotient.lift (s:= @catisSetoid X)
                  (toCC ‚àò F.obj  : X ‚Üí ccSet Y)
                  (fun _ _ => Quot.sound ‚àò transportExt F )

private abbrev liftedMk (s : Setoid Œ±)  := Quotient.lift (Quotient.mk s) (fun _ _ => Quotient.sound)

private def quotDecomp {s : Setoid Œ±}  : ‚àÄ xt : Quotient s, (‚àÉ x, ‚ü¶x‚üß = xt) :=
  Quotient.ind (motive:= (‚àÉ x, Quotient.mk s x = ¬∑)) (by simp; exact ‚ü®¬∑, s.refl _‚ü©)

/- The functor for connected components -/
def connectedComponents : Cat.{v, u} ‚•§ Type u where
  obj C := ccSet C -- maps a category to its set of CC
  map F := fmap F  -- transport a functor to a function beetwen CC
  map_id X := by calc
      fmap (ùüô X) =  liftedMk (@catisSetoid X) := (rfl : fmap (ùüô X) = liftedMk (@catisSetoid X))
      _                       = fun x => x    := by funext xt; obtain ‚ü®x,h‚ü© := quotDecomp xt
                                                    simp [h.symm]
      _                       = ùüô (ccSet X)   := by rfl
  map_comp f g := by simp; funext xt; obtain ‚ü®_,h‚ü© := quotDecomp xt;
                     simp [h.symm];rfl

#check congr

def laxToarx : (connectedComponents.obj C ‚ü∂ X) ‚Üí (C ‚ü∂ typeToCat.obj X) := fun fct =>
  { obj := fun x => x |> Quotient.mk (@catisSetoid C) |> fct |> Discrete.mk
    map := fun {a b} f => by  simp
                              let as := toCC a
                              let bs := toCC b
                              have h : as = bs := Quot.sound (rel f)
                              have h': Discrete.mk ‚ü¶a‚üß = Discrete.mk ‚ü¶b‚üß := congrArg Discrete.mk h
                              let one : Discrete.mk as ‚ü∂ ‚ü®as‚ü© := ùüô ( Discrete.mk as)
                              let two : Discrete.mk as ‚ü∂ ‚ü®bs‚ü© := one
                              exact one
    map_id := sorry
    map_comp := sorry
  }

#check Discrete.mk

def arxTolax :  (C ‚ü∂ typeToCat.obj X) ‚Üí (connectedComponents.obj C ‚ü∂ X) := sorry


def isadj_CC_TypeToCat : connectedComponents ‚ä£ typeToCat where
  homEquiv  := sorry
  unit  := sorry
  counit := sorry


end AdjCC


end CategoryTheory
